# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
from aiogram import Router, F # —Ä–æ—É—Ç–µ—Ä –∏ "–º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä"
from aiogram.types import Message, CallbackQuery
from keyboards.inline_kb import get_services_menu_kb, yes_no_kb
import pandas as pd
import logging


request_router = Router()

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ø–æ–¥–∫–ª—é—á–∏—Ç—å 
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ excel —Ñ–∞–π–ª
def save_to_excel(user_data):
    try:
        df = pd.DataFrame.from_dict(user_data, orient='index')
        df.to_excel('Zayavki.xlsx', index=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Excel: {e}")

# –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
@request_router.callback_query(F.data == 'request_user_data')
async def request_user_data(callback:CallbackQuery):
    await callback.answer()
    await callback.message.answer(
'''üìù<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>

–í–∞—à–µ –§–ò–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).'''
)
    user_data[callback.from_user.id] = {} # —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  

@request_router.message()
async def process_data(message: Message):
    user_id = message.from_user.id
    if user_id not in user_data:
        return
    
    text = message.text
    if '–§–ò–û' not in user_data[user_id]:
        user_data[user_id]['–§–ò–û'] = text
        await message.answer('–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞).')
    elif '–ê–¥—Ä–µ—Å' not in user_data[user_id]:
        user_data[user_id]['–ê–¥—Ä–µ—Å'] = text
        await message.answer('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX)')
    elif '–¢–µ–ª–µ—Ñ–æ–Ω' not in user_data[user_id]:
        user_data[user_id]['–¢–µ–ª–µ—Ñ–æ–Ω'] = text
        await message.answer(
f'''<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b> 
–§–ò–û: {user_data[user_id]['–§–ò–û']}
–ê–¥—Ä–µ—Å: {user_data[user_id]['–ê–¥—Ä–µ—Å']}
–¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id]['–¢–µ–ª–µ—Ñ–æ–Ω']}

–í—Å—ë –≤–µ—Ä–Ω–æ?
''', reply_markup=yes_no_kb()
        )

# –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–∞
@request_router.callback_query(F.data == 'accept')
async def accept(callback:CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –¥–∞–Ω–Ω—ã–µ.")
    save_to_excel(user_data)
    if user_id in user_data:
        del user_data[user_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.edit_text('''üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∏–Ω—Ç–µ—Ä–µ—Å, –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∫ —É—Å–ª—É–≥–∞–º –†–æ—Å—Ç–µ–ª–µ–∫–æ–º–∞.
üë®‚Äçüíª–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
                                     
–†–æ—Å—Ç–µ–ª–µ–∫–æ–º - —ç—Ç–æ:
üèéÔ∏èüí® –æ–ø—Ç–∏–∫–∞ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—É: —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–æ–º–µ
üñ•Ô∏è —É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏ —Ä–µ—à–∏—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç —É –í–∞—Å 
üõ°Ô∏è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞—Ç–∞–∫ –æ–±–µ–∑–æ–ø–∞—Å–∏—Ç –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ'''
                                     )

# –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç   
@request_router.callback_query(F.data == 'decline') 
async def decline(callback:CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('<b>–•–æ—á—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å:</b>', 
                                   reply_markup=get_services_menu_kb())